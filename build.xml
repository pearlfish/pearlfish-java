<?xml version="1.0" encoding="UTF-8"?>
<project name="Pearlfish" default="again">
    <import file="pearlfish.xml"/>

    <property name="report.dir" value="${module.pearlfish.basedir}/out/reports"/>

    <property name="version" value="SNAPSHOT"/>

    <target name="package"
            depends="package.library,
                     package.source,
                     package.dependencies,
                     package.library.standalone,
                     package.javadoc"/>

    <target name="taskdef.jarjar">
        <taskdef name="jarjar" classname="com.tonicsystems.jarjar.JarJarTask"
                 classpath="libs/jarjar/jarjar-1.4.jar"/>
    </target>

    <target name="package.library.standalone" depends="package.library, taskdef.jarjar">
        <jarjar jarfile="out/pearlfish-${version}-standalone.jar">
            <zipfileset src="${basedir}/libs/jmustache/jmustache-natpryce-1.9-SNAPSHOT.jar" excludes="META-INF/**"/>
            <zipfileset src="${basedir}/libs/guava/guava-14.0.1.jar" excludes="META-INF/**"/>
            <zipfileset src="${basedir}/libs/snakeyaml/snakeyaml-1.11.jar" excludes="META-INF/**"/>
            <zipfileset src="out/pearlfish-${version}.jar"/>

            <rule pattern="com.google.common.**" result="info.pearlfish.internal.google.common.@1"/>
            <rule pattern="org.yaml.snakeyaml.**" result="info.pearlfish.internal.snakeyaml.@1"/>
            <rule pattern="com.samskivert.mustache.**" result="info.pearlfish.internal.mustache.@1"/>
        </jarjar>
    </target>

    <target name="package.dependencies">
        <copy todir="out" flatten="true">
            <fileset dir="${basedir}/libs">
                <include name="jmustache/*.jar"/>
                <include name="guava/*.jar"/>
                <include name="snakeyaml/*.jar"/>
                <exclude name="**/*-sources.jar"/>
            </fileset>
        </copy>
    </target>

    <target name="package.library" depends="test">
        <jar destfile="out/pearlfish-${version}.jar">
            <zipfileset dir="${pearlfish.output.dir}" excludes="**/unstable/**"/>
            <zipfileset dir="${basedir}/src/" includes="META-INF/**"/>
        </jar>
    </target>

    <target name="package.source" depends="test">
        <jar destfile="out/pearlfish-${version}-sources.jar">
            <zipfileset dir="src" excludes="**/unstable/**"/>
        </jar>
    </target>

    <target name="package.javadoc" depends="javadoc">
        <jar destfile="out/pearlfish-${version}-javadoc.jar">
            <zipfileset dir="out/javadoc"/>
        </jar>
    </target>

    <target name="javadoc">
        <mkdir dir="out/javadoc"/>
        <javadoc sourcepath="src"
                 destdir="out/javadoc"
                 packagenames="info.pearlfish.*"
                 excludepackagenames="info.pearlfish.internal.*, info.pearlfish.unstable.*"
                 classpathref="pearlfish.module.production.classpath"
                 doctitle="Pearlfish"
                 windowtitle="Pearlfish"/>
    </target>

    <target name="test" depends="all">
        <delete dir="${report.dir}"/>
        <mkdir dir="${report.dir}/xml"/>
        <mkdir dir="${report.dir}/html"/>

        <junit printsummary="yes"
               haltonfailure="false"
               failureproperty="tests.failed"
               includeantruntime="false">

            <classpath refid="pearlfish.runtime.module.classpath"/>
            <formatter type="xml"/>

            <batchtest todir="${report.dir}/xml">
                <fileset dir="${pearlfish.testoutput.dir}">
                    <include name="**/*Test.class"/>
                    <include name="**/*Example.class"/>
                </fileset>
            </batchtest>
        </junit>

        <junitreport todir="${report.dir}/xml">
            <fileset dir="${report.dir}/xml">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${report.dir}/html"/>
        </junitreport>

        <echo message="test reports: file://${report.dir}/html/index.html"/>

        <fail if="${tests.failed}"/>
    </target>

    <target name="real-clean">
        <delete dir="out"/>
    </target>

    <target name="again" depends="real-clean, package"/>
</project>
